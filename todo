Implementation
--------------

* PostSet: selector
    s = maildb.get_selector()
    ps_all = s('all')
    ps_heap = s('[heap]')
    ps_nt = s('{new-thread}')
    ps_nt = s('{flag-new-thread}')
    ps_nt = s('{since 2008-10-10}')
    ps_112 = s('112')
* Generator: sections
* update the README
* Tags: subject -> tag
* devnotes.txt: developer notes
    * architecture (relation of Post, MailDB and PostSet)
    * performance improvement possibilities (iterators)
    * using wrappers to protect e.g. MailDB.posts()
    * terminology: previous, next, cause, consequence
* Generator: * instead of the same subjects; same with tags
    Attis: Something [heap]
      Josh: * [heap] [heap-conventions]
        Csabi: Something else [heap] [heap-conventions]
          Josh: * [heap] [heap-conventions]
* Tags: "tag implies tag" relations
* Flag: New-thead flag to indicate that the email begins a new thread.
  Post.inreplyto -> new-thread flag (stub)
  Post.real_inreplyto
* Console interface
* Actor
* Search
* Downloading emails since given date.
* Generator: it should be able to determine the width of the generated HTML
  page (to discuss)
* Improve CSS
* Cleanup functionality


Discussion
----------

* Parsing email files and handling meta text
* HTML for emails
* "Things which we will talk about later" email
* Folding threads.

test
