Development
===========

This page describes the development methods and the tools that are used.
The :doc:`codingconventions` page contains more specific conventions regarding
the documentation and the source code.

Reading
-------

* `Producing Open Source Software -- How to Run a Successful Free
  Software Project by Karl Fogel`__: A book that gives a lot of practical
  advice to the kinds of projects we are.
* `The Elements of Style by William Strunk, Jr.`__: A book that helps write
  in good English style.

__ http://producingoss.com/
__ http://en.wikisource.org/wiki/The_Elements_of_Style

Development tools
-----------------

All the development tools we use are free and open source programs.

The following programs should be installed on a developer's computer: Python_,
Git_, Sphinx_ and reStructuredText_.

Python
^^^^^^

Python_ is the interpreter that executes Heapkeeper. Heapkeeper needs Python
2.5 or 2.6.

.. _`Python`: http://www.python.org/

Git
^^^

Git_ is version control system that we use to manage the source code and
documentation of Heapkeeper. These are stored in the `Heapkeeper repository`_,
which is hosted by GitHub_. We use Git 1.6, but probably previous versions are
probably fine.

.. _`Git`: http://git-scm.com/
.. _`GitHub`: http://github.com/
.. _`Heapkeeper repository`: http://github.com/hcs42/heapkeeper/

Sphinx
^^^^^^

The documentation is written in reStructuredText_ format and is generated by
the Sphinx_ program.

We currently use Sphinx 0.6.5. Unix users can install it with `easy_install`_:

.. code-block:: sh

    $ sudo easy_install 'sphinx==0.6.5'

The format defined by reStructuredText_ and Sphinx_ is not trivial. Two pages
that are worth to have a look at:

* `Sphinx documentation`_
* `reStructuredText Quick Reference`_

.. _`reStructuredText`: http://docutils.sourceforge.net/rst.html
.. _`Sphinx`: http://sphinx.pocoo.org/
.. _`easy_install`: http://peak.telecommunity.com/DevCenter/EasyInstall
.. _`Mercurial`: http://mercurial.selenic.com/
.. _`Sphinx repository`: http://bitbucket.org/birkenfeld/sphinx/
.. _`Sphinx documentation`: http://sphinx.pocoo.org/contents.html
.. _`reStructuredText Quick Reference`:
   http://docutils.sourceforge.net/docs/user/rst/quickref.html

Communication
-------------

We use a heap to communicate. The development heap will become public when
we feel that Heapkeeper is in a stage to support maintaining a public heap.
Until then, you can contact us via email as described on the
:doc:`index page <index-main>`.

Using the version control system
--------------------------------

* Run the :ref:`tests <testing>` before you *push* your changes and never push
  code whose test fail.
* There is not a strict policy about whether the developers may *commit*
  code intentionally that is not correct (e.g. in the middle of a refactoring).
  Probably the best is not commit incorrect code. (Note: it is about *commit*,
  the developers strictly should not *push* code intentionally that is not
  correct.)
* Try to do larger independent changes in independent commits. E.g. if you add
  50 lines to the documentation and add a new class, and these have nothing to
  do with each other, it is better to have two separate commits for them. Of
  course if the documentation is about the new class, it is better to have them
  in the same commit.

See the conventions about commit messages :ref:`here
<commit_message_conventions>`.

Workflow
--------

Creating a release
^^^^^^^^^^^^^^^^^^

.. highlight:: none

This section will describe our release process. ``<version>`` is the version of
Heapkeeper, it is something like ``0.3``.

#. Get into a clean state in git; a state that you want as the release. Use the
   branch ``_v<version>``

#. Make a list of the most important changes since the last release. Put these
   into ``doc/download.rst`` and commit it.

#. Update the Heapkeeper version number in the following files:

   - ``README``
   - ``hklib.py``
   - ``doc/conf.py``
   - ``doc/tutorial.rst``
   - ``doc/download.rst``

#. Make a commit. The commit message shall use this template::

    Heapkeeper v<version> released.

    <List of changes copied from download.rst>.

#. Push the changes to the GitHub repository::

    $ git push origin _v<version>

#. Let the others review the commits.

#. If everybody is satisfied, tag the commit, push the tag and merge the
   master::

    $ git tag v<version>
    $ git push origin v<version>
    $ git checkout master
    $ git merge v<version>
    $ git push origin master
    $ git push origin :_v<version>

#. Execute the documentation pusher and package maker scripts::

    $ scripts/pushdoc hcs@heapkeeper.org
    $ scripts/make_package
    $ scripts/pushrelease hcs@heapkeeper.org

#. Make an announcement on Freshmeat__

#. Change the new version string in the following files to ``<version>+`` (e.g.
   ``0.3+``):

   - ``README``
   - ``hklib.py``
   - ``doc/conf.py``

__ http://freshmeat.net/
