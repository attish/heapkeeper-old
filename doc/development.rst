Development
===========

This page describes the development methods and the tools that are used.
The :doc:`codingconventions` page contains more specific conventions regarding
the documentation and the source code.

.. _reading:

Reading
-------

* `Producing Open Source Software -- How to Run a Successful Free
  Software Project by Karl Fogel`__: A book that gives a lot of practical
  advice to the kinds of projects we are.
* `The Elements of Style by William Strunk, Jr.`__: A book that helps write
  in good English style.

__ http://producingoss.com/
__ http://en.wikisource.org/wiki/The_Elements_of_Style

Development tools
-----------------

.. highlight:: sh

All the development tools we use are free and open source programs.

The following programs should be installed on a developer's computer: Python_,
Git_ and Sphinx_.

Python
^^^^^^

Python_ is the interpreter that executes Heapkeeper. Heapkeeper needs Python
2.5, 2.6 or 2.7.

.. _`Python`: http://www.python.org/

.. _gitref:

Git
^^^

Git_ is version control system that we use to manage the source code and
documentation of Heapkeeper. These are stored in the `Heapkeeper repository`_,
which is hosted by GitHub_. We use Git 1.6, but previous versions are probably
fine.

Installation procedure for Debian and Ubuntu Linux users::

    $ sudo apt-get install git-core

Using Git to download Heapkeeper::

    $ git clone git://github.com/hcs42/heapkeeper.git

.. _`Git`: http://git-scm.com/
.. _`GitHub`: http://github.com/
.. _`Heapkeeper repository`: http://github.com/hcs42/heapkeeper/

.. _development_sphinx:

Sphinx
^^^^^^

The Heapkeeper documentation is written in reStructuredText_ format and is
generated by the Sphinx_ program. We currently use Sphinx 0.6.5.

Installation procedure for Unix users::

    $ sudo easy_install 'sphinx==0.6.5'

Compiling the Heapkeeper documentation::

    $ cd <Heapkeeper directory>
    $ cd doc
    $ make html

The format defined by reStructuredText_ and Sphinx_ is not trivial. Two pages
that are worth to have a look at:

* `Sphinx documentation`_
* `reStructuredText Quick Reference`_

.. _`reStructuredText`: http://docutils.sourceforge.net/rst.html
.. _`Sphinx`: http://sphinx.pocoo.org/
.. _`easy_install`: http://peak.telecommunity.com/DevCenter/EasyInstall
.. _`Mercurial`: http://mercurial.selenic.com/
.. _`Sphinx repository`: http://bitbucket.org/birkenfeld/sphinx/
.. _`Sphinx documentation`: http://sphinx.pocoo.org/contents.html
.. _`reStructuredText Quick Reference`:
   http://docutils.sourceforge.net/docs/user/rst/quickref.html

.. _pylint:

pylint
^^^^^^

pylint__ is a static analyzer tool that can find bugs and warn when we break
coding conventions. We wrote a wrapper around pylint in :ref:`hk-dev-utils`,
because there are some warnings we don't care about (or at least not now).

Installation procedure for Unix users::

    $ sudo easy_install 'pylint==0.21'

It is recommended to use the ``hk_pylint`` wrapper (part of
:ref:`hk-dev-utils`) to execute pylint on Heapkeeper::

    $ cd <Heapkeeper directory>
    $ hk-dev-utils/hk_pylint

__ http://www.logilab.org/857

.. _coveragepy:

coverage.py
^^^^^^^^^^^

`coverage.py`__ is a tool for measuring code coverage of automatic tests
for Python programs.

Installation procedure on Debian and Ubuntu Linux::

    $ sudo apt-get install python-dev python-setuptools
    $ sudo easy_install coverage

Measuring the code coverage of Heapkeeper's automatic tests::

    $ cd <Heapkeeper directory>
    $ coverage erase
    $ coverage run test.py
    ----------------------------------------------------------------------
    Ran 96 tests in 0.221s

    OK
    $ coverage report hk{utils,lib,gen,shell,customlib}.py
    Name          Stmts   Exec  Cover
    ---------------------------------
    hkcustomlib      68     39    57%
    hkgen           368    263    71%
    hklib           868    696    80%
    hkshell         461    307    66%
    hkutils         117     95    81%
    ---------------------------------
    TOTAL          1882   1400    74%

Displaying the covered code in HTML (the module names in the index.html are
links to the detailed results)::

    $ coverage html -d coverage-html hk{utils,lib,gen,shell,customlib}.py
    $ <your browser of choice> coverage-html/index.html

__ http://nedbatchelder.com/code/coverage/

.. _margitka:

margitka
^^^^^^^^

Margitka__ is a modification of Gitk__ that displays the topics of the commit
message in a separate text area, which is useful for our :ref:`commit message
conventions <commit_message_conventions>`.

Margitka can be downloaded from GitHub, no installation is needed::

    $ git clone git://github.com/attish/margitka.git

The parametrization of Margitka is same as that of Gitk, for example::

    $ cd <Heapkeeper directory>
    $ <path to margitka>/margitka --all &

__ http://github.com/attish/margitka
__ http://lwn.net/Articles/140350/

.. _hk-dev-utils:

hk-dev-utils
^^^^^^^^^^^^

`hk-dev-utils`__ is a set of scripts to help Heapkeeper developers.

hk-dev-utils can be downloaded from GitHub, no installation is needed::

    $ cd <Heapkeeper directory>
    $ git clone git://github.com/hcs42/hk-dev-utils.git

This way the ``hk-dev-utils`` directory will be in Heapkeeper's directory, but
the two repositories will be completely separate.

__ http://github.com/hcs42/hk-dev-utils

Used libraries
--------------

web.py
^^^^^^

`web.py`__ is a simple but powerful Python web framework.

It is not bundled with Heapkeeper. Unix users can download it with the
following command::

    $ sudo easy_install 'web.py==0.34'

__ http://webpy.org/

.. _jquery:

jQuery
^^^^^^

jQuery__ is a JavaScript library that makes it easier to do DOM manipulation,
event handling, AJAX etc. jQuery is included in Heapkeeper.

__ http://jquery.com/

.. _json2:

json2.js
^^^^^^^^

`json2`__ is a JSON__ parser/stringifier. json2 is included in Heapkeeper.

__ http://www.json.org/js.html
__ http://www.json.org/

.. _jsmin:

jsmin
^^^^^

jsmin__ is a JavaScript minimizer implemented in multiple languages, e.g. in
Python.

__ http://javascript.crockford.com/jsmin.html

.. _webpy:

Communication
-------------

.. _heapkeeper_heap:

Communication: Heapkeeper Heap
------------------------------

We use a heap to communicate. That heap is called the Heapkeeper Heap. The
e-mail address of the traditional mailing list behind it is
:email:`heapkeeper-heap@googlegroups.com`, so send an email to this address if
you want to send a post to the Heapkeeper Heap. The post database of Heapkeeper
Heap can be accessed here__. The generated HTML pages can be viewed here__.
Check it out to see an example of Heapkeeper in action.

__ http://github.com/hcs42/heapkeeper-heap
__ http://heapkeeper-heap.github.com

Workflow
--------

Policies about commits
^^^^^^^^^^^^^^^^^^^^^^

The following rules apply to commits in the GitHub repositories. Anyone may
have commits in their own private repositories that do not conform to these
policies; but before the commits are pushed to GitHub, they should be rebased
so that they conform.

* All commits should be correct and should contain a version of Heapkeeper that
  works correctly.
* Every test case in every commit should pass; i.e. ``test.py`` should execute
  all test cases and it should not report any failures. See also :ref:`tests
  <testing>`.
* :ref:`pylint` should not give any warning in any commit that is not disabled
  in the ``pylintrc`` file of the corresponding commit; i.e.
  ``hk-dev-utils/hk_pylint`` should not print anything.
* Do independent changes in independent commits, but closely related changes in
  the same commit. As Karl Fogel wrote in his :ref:`book <reading>`: "have each
  commit be a single logical change". You can read more here__. Examples from
  Heapkeeper development:

  * If you add some documentation and add a new class, and these have not much
    to do with each other, create two separate commits for them.
  * If you add a new method to a class, write documentation and unit tests for
    the method, create one commit for all of these. It is nice to review a
    commit when both the documentation and the unit tests for the change are in
    the commit.
  * If several totally independent source code lines are modified in order to
    get rid of :ref:`pylint` warnings, these should be in one commit. The parts
    of the source code that were modified may have nothing to do with each
    other, but the commit is still logically a single change because of the one
    common objective.

See the conventions about commit messages :ref:`here
<commit_message_conventions>`.

__ http://producingoss.com/en/releases-and-daily-development.html

Developing code and committing it to the local repository
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Write the code (``*.py``) and the unit test (in ``test_*.py``) in parallel.
#. Execute :ref:`pylint` to find problems::

    $ hk-dev-utils/hk_pylint

#. Execute the unit test suite including the test you just wrote::

    $ ./test.py

#. Try out the Generator::

    $ ./hk.py --noshell 'g()'

#. Document your modifications by writing docstrings.
#. Check that the docstrings are correct by generating the HTML documentation
   and viewing it in a browser::

    $ cd doc
    $ make html
    $ <your browser of choice> _build/html/modules.html

#. Check that your modifications does not include anything you don't want::

    $ git diff

#. Commit your modifications::

    $ git commit -av

Pushing to your GitHub repository
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Fetch commits of other developers, e.g.::

    git remote prune other_repo
    git fetch other_repo

#. Rebase your branch if needed.
#. Run through the commits to be pushed using :ref:`margitka`.
#. Run the unit test suite once again on all commits to be pushed::

    $ hk-dev-utils/test_commits [COMMIT_1] [COMMIT_2] ...

#. Check that the generated HTML pages were not modified using
   ``hk-dev-utils/testhtml``. Probably you should write a wrapper around it as I
   did. I invoke my wrapper this way::

    $ hcs/testhtml [COMMIT_1] [COMMIT_2] ...

#. Check that post downloading works.

#. Push the changes::

    $ git push origin <branch>

Creating a new module
^^^^^^^^^^^^^^^^^^^^^

#. Create the source module (``src/<newmodule>.py``) and the test module
   (``src/test_<newmodule>.py``). Copy the copyright notice into both.
#. Create the documentation page (``doc/<newmodule>.rst``).
#. Update ``doc/defs.hrst`` with a macro for the new module.
#. Update ``doc/modules.rst``.
#. Update ``doc/architecture.rst`` with the description of the new module and
   ``doc/module_deps.png``::

    $ cd doc
    $ <your editor of choice> module_deps.dot
    $ dot -Tpng -o images/module_deps.png module_deps.dot

Creating a release
^^^^^^^^^^^^^^^^^^

.. highlight:: none

This section will describe our release process. ``<version>`` is the version of
Heapkeeper, it is something like ``0.3``.

#. Get into a clean state in git; a state that you want as the release. Use the
   branch ``_v<version>``

#. Make a list of the most important changes since the last release. Put these
   into ``doc/download.rst`` and commit it.

#. Update the Heapkeeper version number in the following files:

   - ``README``
   - ``src/hklib.py``
   - ``doc/conf.py``
   - ``doc/tutorial.rst``
   - ``doc/download.rst``

#. Make a commit. The commit message shall use this template::

    Heapkeeper v<version> released.

    [v<version>]

    <List of changes copied from download.rst>.

#. Execute the package maker script and push the package to the homepage::

    $ hkdu-make-package
    $ hkdu-pushrelease hcs@heapkeeper.org

#. Download the uploaded package and perform the steps in the :doc:`tutorial`.

#. Push the changes to the GitHub repository::

    $ git push origin _v<version>

#. Send an email to the Heapkeeper Heap. Let the others review the commits.

#. If everybody is satisfied, tag the commit, push the tag::

    $ git tag v<version>
    $ git push origin v<version>

#. Push the new documentation to the home page::

    $ cd doc; make clean && make html; cd ..
    $ hk-dev-utils/pushdoc hcs@heapkeeper.org

#. Check out ``_master`` and fast forward it to the new release::

    $ git checkout _master
    $ git merge v<version>

#. Change the new version string in the following files to ``<version>+`` (e.g.
   ``0.3+``):

   - ``README``
   - ``hklib.py``
   - ``doc/conf.py``

#. Commit it into ``_master``, and use the following commit message::

    Heapkeeper v<version>+ first commit

    [v<version>]

#. Fast forward ``master`` to ``_master``. Push both branches, and remove
   branch ``_v<version>``::

    $ git checkout master
    $ git merge _master
    $ git checkout _master
    $ git push origin master _master
    $ git push origin :_v<version>

#. Send an email to the Heapkeeper Heap. Make an announcement on Freshmeat__.

__ http://freshmeat.net/projects/heapkeeper
