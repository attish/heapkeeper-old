Implementation
--------------

* Generator: user defines how to cut the subject
* Post generator: put prev and next links into HTML-s
* Tests:
    * Generator
    * heapmanip.Post.{set_tags, remove_tag}
    * heapia
    * Post.load
* Correct problem: order of posts in cycles in HTML is nondeterministic
  (the test was put into comment)
* putting our Heap over ftp
* tags, flags
    * should the tags be case insensitive?
    * Implementing tags and flags as frozensets
    * Tags dependencies, TagInfo class
    * Flag: New-thead flag to indicate that the email begins a new thread.
      Post.inreplyto -> new-thread flag (stub)
      Post.real_inreplyto
* Developer Guide
    * architecture (relation of Post, MailDB and PostSet)
    * performance improvement possibilities (iterators)
    * using wrappers to protect e.g. MailDB.posts()
    * terminology: previous, next, cause, consequence
* Generator: different colours for the posts that are not in a section but
  their thread is
* Actor
* Search
* Generator: it should be able to determine the width of the generated HTML
  page (to discuss)
* Improve CSS, including heapindex.css into the customized heapindex.css
* Cleanup functionality
* A better system for touch: it should know what should be recalculated and
  what should not be
* heapia could print affected emails after executing a command
* Downloading emails since given date.
  Workaround: if we go to the heap account regularly and archive the emails in
  the inbox, downloading new mail will remain fast.


Discussion
----------

* Parsing email files and handling meta text
* HTML for emails
* "Things which we will talk about later" email
* Folding threads.
